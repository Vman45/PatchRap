%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Wed Jan 25 17:01:04 2017
%%Title: /home/commonadmin/permanent/profitable/C3DP/Corporate/PatchRap/subsystems/analog/analog-sys.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
5964 499 translate 90 rotate
0.714703 0.714703 scale
-36200 -52567 translate
gsave
49600 55500 49400 55500 10 line
48900 55400 48800 55500 10 line
48800 55500 48900 55600 10 line
49400 55500 49300 55600 10 line
49300 55400 49400 55500 10 line
49300 55400 48900 55400 10 line
49300 55600 48900 55600 10 line
grestore
gsave
false true false true 202.222224 [(net=SigP:1) ] 0 48700 55400 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 48700 55500 180.555557 text
grestore
gsave
46100 55700 46300 55700 10 line
46100 55800 46100 55600 10 line
46050 55745 46050 55655 10 line
46010 55720 46010 55680 10 line
grestore
gsave
49600 57000 49400 57000 10 line
48900 56900 48800 57000 10 line
48800 57000 48900 57100 10 line
49400 57000 49300 57100 10 line
49300 56900 49400 57000 10 line
49300 56900 48900 56900 10 line
49300 57100 48900 57100 10 line
grestore
gsave
false true false true 202.222224 [(net=SigAlt:1) ] 0 48700 56900 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 48700 57000 180.555557 text
grestore
gsave
49600 53500 49400 53500 10 line
48900 53400 48800 53500 10 line
48800 53500 48900 53600 10 line
49400 53500 49300 53600 10 line
49300 53400 49400 53500 10 line
49300 53400 48900 53400 10 line
49300 53600 48900 53600 10 line
grestore
gsave
false true false true 202.222224 [(net=PWMa:1) ] 0 48700 53400 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 48700 53500 180.555557 text
grestore
gsave
41900 54600 41900 54750 10 line
41900 55500 41900 55350 10 line
41900 55263 75 90 270 10 darc
41900 55121 75 90 270 10 darc
41900 54979 75 90 270 10 darc
41900 54837 75 90 270 10 darc
41900 54762 41900 54750 10 line
41900 55350 41900 55338 10 line
41900 55192 4 -90 90 10 darc
41900 55050 4 -90 90 10 darc
41900 54908 4 -90 90 10 darc
newpath
41900 54600
25
0 360 arc
fill
newpath
41900 55500
25
0 360 arc
fill
grestore
gsave
false false false true 202.222224 [(L1) ] 270 41900 55400 180.555557 text
grestore
gsave
false false false true 202.222224 [(10Ohm) ] 270 42000 55200 180.555557 text
grestore
gsave
41900 54400 41900 54600 10 line
42000 54400 41800 54400 10 line
41945 54350 41855 54350 10 line
41920 54310 41880 54310 10 line
newpath
41900 54600
25
0 360 arc
fill
grestore
gsave
40900 55500 41100 55500 10 line
gsave
false true false false 161.777776 [(2) ] 90 41050 55450 144.444443 text
grestore
41900 55500 41700 55500 10 line
gsave
false true false false 161.777776 [(1) ] 90 41850 55450 144.444443 text
grestore
41200 55500 50 0 360 10 darc
41600 55500 50 0 360 10 darc
41100 55400 41700 55400 10 line
41700 55400 41700 55600 10 line
41700 55600 41100 55600 10 line
41100 55600 41100 55400 10 line
newpath
41900 55500
25
0 360 arc
fill
grestore
gsave
false false false true 202.222224 [(J2) ] 270 41500 55600 180.555557 text
grestore
gsave
40900 55500 40700 55500 10 line
40200 55400 40100 55500 10 line
40100 55500 40200 55600 10 line
40700 55500 40600 55600 10 line
40600 55400 40700 55500 10 line
40600 55400 40200 55400 10 line
40600 55600 40200 55600 10 line
grestore
gsave
false true false true 202.222224 [(net=SigM:1) ] 0 40000 55400 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 40000 55500 180.555557 text
grestore
gsave
41900 55500 42100 55500 10 line
42600 55400 42700 55500 10 line
42700 55500 42600 55600 10 line
42100 55500 42200 55600 10 line
42200 55400 42100 55500 10 line
42200 55400 42600 55400 10 line
42200 55600 42600 55600 10 line
newpath
41900 55500
25
0 360 arc
fill
grestore
gsave
false false false true 202.222224 [(net=SigGND:1) ] 0 42800 55400 180.555557 text
grestore
gsave
false false true false 202.222224 [(IO) ] 0 42800 55500 180.555557 text
grestore
gsave
50000 55000 49800 55000 10 line
49300 54900 49200 55000 10 line
49200 55000 49300 55100 10 line
49800 55000 49700 55100 10 line
49700 54900 49800 55000 10 line
49700 54900 49300 54900 10 line
49700 55100 49300 55100 10 line
grestore
gsave
false true false true 202.222224 [(net=SigGND:1) ] 0 49100 54900 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 49100 55000 180.555557 text
grestore
41900 55500 42000 55500 10 line
42000 55500 42000 55300 10 line
42000 55300 42200 55300 10 line
42200 55300 42200 54800 10 line
41900 54600 42000 54600 10 line
42000 54600 42000 54800 10 line
42000 54800 42200 54800 10 line
gsave
36700 54300 36900 54300 10 line
36400 54300 36300 54400 10 line
36400 54300 36300 54200 10 line
36700 54300 36400 54300 10 line
grestore
gsave
false false false false 202.222224 [(sGND) ] 0 36400 54300 180.555557 text
grestore
gsave
36900 54100 36900 54300 10 line
36800 54100 37000 54100 10 line
36855 54050 36945 54050 10 line
36880 54010 36920 54010 10 line
grestore
gsave
36700 55200 36900 55200 10 line
36400 55200 36300 55300 10 line
36400 55200 36300 55100 10 line
36700 55200 36400 55200 10 line
grestore
gsave
false false false false 202.222224 [(SigM) ] 0 36400 55200 180.555557 text
grestore
gsave
36900 55200 37100 55200 10 line
37600 55100 37700 55200 10 line
37700 55200 37600 55300 10 line
37100 55200 37200 55300 10 line
37200 55100 37100 55200 10 line
37200 55100 37600 55100 10 line
37200 55300 37600 55300 10 line
grestore
gsave
false false false true 202.222224 [(net=SigM:1) ] 0 37800 55100 180.555557 text
grestore
gsave
false false true false 202.222224 [(IO) ] 0 37800 55200 180.555557 text
grestore
gsave
36700 55600 36900 55600 10 line
36400 55600 36300 55700 10 line
36400 55600 36300 55500 10 line
36700 55600 36400 55600 10 line
grestore
gsave
false false false false 202.222224 [(SigP) ] 0 36400 55600 180.555557 text
grestore
gsave
36900 55600 37100 55600 10 line
37600 55500 37700 55600 10 line
37700 55600 37600 55700 10 line
37100 55600 37200 55700 10 line
37200 55500 37100 55600 10 line
37200 55500 37600 55500 10 line
37200 55700 37600 55700 10 line
grestore
gsave
false false false true 202.222224 [(net=SigP:1) ] 0 37800 55500 180.555557 text
grestore
gsave
false false true false 202.222224 [(IO) ] 0 37800 55600 180.555557 text
grestore
gsave
36700 56500 36900 56500 10 line
36400 56500 36300 56600 10 line
36400 56500 36300 56400 10 line
36700 56500 36400 56500 10 line
grestore
gsave
false false false false 202.222224 [(SigAlt) ] 0 36400 56500 180.555557 text
grestore
gsave
36900 56500 37100 56500 10 line
37600 56400 37700 56500 10 line
37700 56500 37600 56600 10 line
37100 56500 37200 56600 10 line
37200 56400 37100 56500 10 line
37200 56400 37600 56400 10 line
37200 56600 37600 56600 10 line
grestore
gsave
false false false true 202.222224 [(net=SigAlt:1) ] 0 37800 56500 180.555557 text
grestore
gsave
false false true false 202.222224 [(IO) ] 0 37800 56600 180.555557 text
grestore
gsave
36800 52800 37000 52800 10 line
37500 52700 37600 52800 10 line
37600 52800 37500 52900 10 line
37000 52800 37100 52900 10 line
37100 52700 37000 52800 10 line
37100 52700 37500 52700 10 line
37100 52900 37500 52900 10 line
grestore
gsave
false false false true 202.222224 [(net=PWMd:1) ] 0 37700 52700 180.555557 text
grestore
gsave
false false true false 202.222224 [(IO) ] 0 37700 52800 180.555557 text
grestore
gsave
36600 52800 36800 52800 10 line
36300 52800 36200 52900 10 line
36300 52800 36200 52700 10 line
36600 52800 36300 52800 10 line
grestore
gsave
false false false false 202.222224 [(PWMd) ] 0 36300 52800 180.555557 text
grestore
gsave
36800 53200 37000 53200 10 line
37500 53100 37600 53200 10 line
37600 53200 37500 53300 10 line
37000 53200 37100 53300 10 line
37100 53100 37000 53200 10 line
37100 53100 37500 53100 10 line
37100 53300 37500 53300 10 line
grestore
gsave
false false false true 202.222224 [(net=PWMa:1) ] 0 37700 53100 180.555557 text
grestore
gsave
false false true false 202.222224 [(IO) ] 0 37700 53200 180.555557 text
grestore
gsave
36600 53200 36800 53200 10 line
36300 53200 36200 53300 10 line
36300 53200 36200 53100 10 line
36600 53200 36300 53200 10 line
grestore
gsave
false false false false 202.222224 [(PWMa) ] 0 36300 53200 180.555557 text
grestore
gsave
50000 53000 49800 53000 10 line
49300 52900 49200 53000 10 line
49200 53000 49300 53100 10 line
49800 53000 49700 53100 10 line
49700 52900 49800 53000 10 line
49700 52900 49300 52900 10 line
49700 53100 49300 53100 10 line
grestore
gsave
false true false true 202.222224 [(net=PWMd:1) ] 0 49100 52900 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 49100 53000 180.555557 text
grestore
gsave
46300 56100 46500 56100 10 line
gsave
false false false false 161.777776 [(1) ] 0 46650 56100 144.444443 text
grestore
46550 56100 50 0 360 10 darc
46300 55700 46500 55700 10 line
gsave
false false false false 161.777776 [(2) ] 0 46650 55700 144.444443 text
grestore
46550 55700 50 0 360 10 darc
46300 55300 46500 55300 10 line
gsave
false false false false 161.777776 [(3) ] 0 46650 55300 144.444443 text
grestore
46550 55300 50 0 360 10 darc
46300 54900 46500 54900 10 line
gsave
false false false false 161.777776 [(4) ] 0 46650 54900 144.444443 text
grestore
46550 54900 50 0 360 10 darc
46300 54500 46500 54500 10 line
gsave
false false false false 161.777776 [(5) ] 0 46650 54500 144.444443 text
grestore
46550 54500 50 0 360 10 darc
46300 54100 46500 54100 10 line
gsave
false false false false 161.777776 [(6) ] 0 46650 54100 144.444443 text
grestore
46550 54100 50 0 360 10 darc
46600 53700 47000 53700 10 line
47000 53700 47000 56500 10 line
47000 56500 46600 56500 10 line
46600 56500 46600 53700 10 line
grestore
gsave
false true false false 202.222224 [(TERM) ] 0 47000 56600 180.555557 text
grestore
gsave
49950 56950 150 0 360 10 darc
49950 56950 50 0 360 10 darc
50000 56800 50000 56500 10 line
gsave
false true false false 161.777776 [(2) ] 0 49950 56600 144.444443 text
grestore
49900 57000 49915 56985 10 line
49900 57000 49600 57000 10 line
gsave
false true false false 161.777776 [(1) ] 0 49750 57050 144.444443 text
grestore
50000 56800 49996 56807 10 line
grestore
gsave
false true false false 202.222224 [(AIO3) ] 0 50200 57200 180.555557 text
grestore
gsave
49950 55450 150 0 360 10 darc
49950 55450 50 0 360 10 darc
50000 55300 50000 55000 10 line
gsave
false true false false 161.777776 [(2) ] 0 49950 55100 144.444443 text
grestore
49900 55500 49915 55485 10 line
49900 55500 49600 55500 10 line
gsave
false true false false 161.777776 [(1) ] 0 49750 55550 144.444443 text
grestore
50000 55300 49996 55307 10 line
grestore
gsave
false true false false 202.222224 [(AIO1) ] 0 50200 55700 180.555557 text
grestore
gsave
49950 53450 150 0 360 10 darc
49950 53450 50 0 360 10 darc
50000 53300 50000 53000 10 line
gsave
false true false false 161.777776 [(2) ] 0 49950 53100 144.444443 text
grestore
49900 53500 49915 53485 10 line
49900 53500 49600 53500 10 line
gsave
false true false false 161.777776 [(1) ] 0 49750 53550 144.444443 text
grestore
50000 53300 49996 53307 10 line
grestore
gsave
false true false false 202.222224 [(AIO2) ] 0 50200 53700 180.555557 text
grestore
gsave
46300 54500 46100 54500 10 line
45600 54400 45500 54500 10 line
45500 54500 45600 54600 10 line
46100 54500 46000 54600 10 line
46000 54400 46100 54500 10 line
46000 54400 45600 54400 10 line
46000 54600 45600 54600 10 line
grestore
gsave
false true false true 202.222224 [(net=PWMa:1) ] 0 45400 54400 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 45400 54500 180.555557 text
grestore
gsave
46300 54100 46100 54100 10 line
45600 54000 45500 54100 10 line
45500 54100 45600 54200 10 line
46100 54100 46000 54200 10 line
46000 54000 46100 54100 10 line
46000 54000 45600 54000 10 line
46000 54200 45600 54200 10 line
grestore
gsave
false true false true 202.222224 [(net=PWMd:1) ] 0 45400 54000 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 45400 54100 180.555557 text
grestore
gsave
46300 55300 46100 55300 10 line
45600 55200 45500 55300 10 line
45500 55300 45600 55400 10 line
46100 55300 46000 55400 10 line
46000 55200 46100 55300 10 line
46000 55200 45600 55200 10 line
46000 55400 45600 55400 10 line
grestore
gsave
false true false true 202.222224 [(net=SigP:1) ] 0 45400 55200 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 45400 55300 180.555557 text
grestore
gsave
46300 56100 46100 56100 10 line
45600 56000 45500 56100 10 line
45500 56100 45600 56200 10 line
46100 56100 46000 56200 10 line
46000 56000 46100 56100 10 line
46000 56000 45600 56000 10 line
46000 56200 45600 56200 10 line
grestore
gsave
false true false true 202.222224 [(net=SigAlt:1) ] 0 45400 56000 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 45400 56100 180.555557 text
grestore
gsave
49800 56500 50000 56500 10 line
49800 56600 49800 56400 10 line
49750 56545 49750 56455 10 line
49710 56520 49710 56480 10 line
grestore
gsave
41500 54000 41700 54000 10 line
42200 53900 42300 54000 10 line
42300 54000 42200 54100 10 line
41700 54000 41800 54100 10 line
41800 53900 41700 54000 10 line
41800 53900 42200 53900 10 line
41800 54100 42200 54100 10 line
grestore
gsave
false false false true 202.222224 [(net=PWMd:1) ] 0 42400 53900 180.555557 text
grestore
gsave
false false true false 202.222224 [(IO) ] 0 42400 54000 180.555557 text
grestore
gsave
41500 53000 41500 53200 10 line
gsave
false false false true 161.777776 [(2) ] 0 41550 53150 144.444443 text
grestore
41500 54000 41500 53800 10 line
gsave
false false false true 161.777776 [(1) ] 0 41550 53950 144.444443 text
grestore
41500 53300 50 0 360 10 darc
41500 53700 50 0 360 10 darc
41400 53200 41600 53200 10 line
41600 53200 41600 53800 10 line
41600 53800 41400 53800 10 line
41400 53800 41400 53200 10 line
grestore
gsave
false false false true 202.222224 [(J1) ] 0 41400 53600 180.555557 text
grestore
gsave
41500 52800 41500 53000 10 line
41400 52800 41600 52800 10 line
41455 52750 41545 52750 10 line
41480 52710 41520 52710 10 line
grestore
gsave
46300 54900 46100 54900 10 line
45600 54800 45500 54900 10 line
45500 54900 45600 55000 10 line
46100 54900 46000 55000 10 line
46000 54800 46100 54900 10 line
46000 54800 45600 54800 10 line
46000 55000 45600 55000 10 line
grestore
gsave
false true false true 202.222224 [(net=SigM:1) ] 0 45400 54800 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 45400 54900 180.555557 text
grestore
newpath
41900 54600
25
0 360 arc
fill
newpath
41900 55500
25
0 360 arc
fill
newpath
41900 54600
25
0 360 arc
fill
newpath
41900 55500
25
0 360 arc
fill
newpath
41900 55500
25
0 360 arc
fill
newpath
41900 55500
25
0 360 arc
fill
newpath
41900 54600
25
0 360 arc
fill
showpage
%%End
