%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Wed Jan 25 16:58:52 2017
%%Title: /home/commonadmin/permanent/profitable/C3DP/Corporate/PatchRap/GenericRap.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
8113 2233 translate 90 rotate
0.780533 0.780533 scale
-55129 -54100 translate
gsave
62400 59000 63500 59000 10 line
63500 59000 63500 64000 10 line
63500 64000 62400 64000 10 line
62400 64000 62400 59000 10 line
62300 63300 62600 63300 10 line
gsave
false false false false 202.222224 [(Vsys) ] 0 62755 63295 180.555557 text
grestore
gsave
false true false false 202.222224 [(1) ] 0 62505 63345 180.555557 text
grestore
62300 63100 62600 63100 10 line
gsave
false false false false 202.222224 [(pGND) ] 0 62755 63095 180.555557 text
grestore
gsave
false true false false 202.222224 [(2) ] 0 62505 63145 180.555557 text
grestore
62300 62700 62600 62700 10 line
gsave
false false false false 202.222224 [(Vext) ] 0 62755 62695 180.555557 text
grestore
gsave
false true false false 202.222224 [(3) ] 0 62505 62745 180.555557 text
grestore
62300 62500 62600 62500 10 line
gsave
false false false false 202.222224 [(sGND) ] 0 62755 62495 180.555557 text
grestore
gsave
false true false false 202.222224 [(4) ] 0 62505 62545 180.555557 text
grestore
62300 61700 62600 61700 10 line
gsave
false false false false 202.222224 [(SigP) ] 0 62755 61695 180.555557 text
grestore
gsave
false true false false 202.222224 [(5) ] 0 62505 61745 180.555557 text
grestore
62300 61400 62600 61400 10 line
gsave
false false false false 202.222224 [(SigM) ] 0 62755 61395 180.555557 text
grestore
gsave
false true false false 202.222224 [(6) ] 0 62505 61445 180.555557 text
grestore
62300 60800 62600 60800 10 line
gsave
false false false false 202.222224 [(PWMd) ] 0 62755 60795 180.555557 text
grestore
gsave
false true false false 202.222224 [(8) ] 0 62505 60845 180.555557 text
grestore
62300 61100 62600 61100 10 line
gsave
false false false false 202.222224 [(PWMa) ] 0 62755 61095 180.555557 text
grestore
gsave
false true false false 202.222224 [(7) ] 0 62505 61145 180.555557 text
grestore
62300 60000 62600 60000 10 line
gsave
false false false false 202.222224 [(Ap) ] 0 62755 59995 180.555557 text
grestore
gsave
false true false false 202.222224 [(10) ] 0 62605 60045 180.555557 text
grestore
62300 60300 62600 60300 10 line
gsave
false false false false 202.222224 [(Bp) ] 0 62755 60295 180.555557 text
grestore
gsave
false true false false 202.222224 [(9) ] 0 62505 60345 180.555557 text
grestore
62300 59700 62600 59700 10 line
gsave
false false false false 202.222224 [(Am) ] 0 62755 59695 180.555557 text
grestore
gsave
false true false false 202.222224 [(11) ] 0 62605 59745 180.555557 text
grestore
62300 59400 62600 59400 10 line
gsave
false false false false 202.222224 [(Bm) ] 0 62755 59395 180.555557 text
grestore
gsave
false true false false 202.222224 [(12) ] 0 62605 59445 180.555557 text
grestore
60 60 62270 59970 fbox
60 60 62270 60270 fbox
60 60 62270 59670 fbox
60 60 62270 59370 fbox
grestore
gsave
false false false false 202.222224 [(cncio) ] 0 62600 63700 180.555557 text
grestore
gsave
false false false false 202.222224 [(X2) ] 0 63200 63600 180.555557 text
grestore
gsave
62000 63300 62000 63500 10 line
61850 63500 62150 63500 10 line
grestore
gsave
true false false false 202.222224 [(Vsys:1) ] 0 62000 63550 180.555557 text
grestore
gsave
61500 63100 61500 63300 10 line
61350 63300 61650 63300 10 line
gsave
false false false false 161.777776 [(Vee) ] 0 61375 63350 144.444443 text
grestore
grestore
62300 63100 61500 63100 10 line
gsave
61800 62900 61800 62500 10 line
62100 62700 61800 62700 10 line
gsave
false true false false 202.222224 [(Vext) ] 90 61800 62900 180.555557 text
grestore
grestore
gsave
62100 62500 62300 62500 10 line
62100 62400 62100 62600 10 line
62050 62455 62050 62545 10 line
62010 62480 62010 62520 10 line
grestore
62100 62700 62300 62700 10 line
gsave
62300 61700 62100 61700 10 line
61600 61600 61500 61700 10 line
61500 61700 61600 61800 10 line
62100 61700 62000 61800 10 line
62000 61600 62100 61700 10 line
62000 61600 61600 61600 10 line
62000 61800 61600 61800 10 line
grestore
gsave
false true false true 202.222224 [(net=SigP:1) ] 0 61400 61600 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 61400 61700 180.555557 text
grestore
gsave
62300 61400 62100 61400 10 line
61600 61300 61500 61400 10 line
61500 61400 61600 61500 10 line
62100 61400 62000 61500 10 line
62000 61300 62100 61400 10 line
62000 61300 61600 61300 10 line
62000 61500 61600 61500 10 line
grestore
gsave
false true false true 202.222224 [(net=SigM:1) ] 0 61400 61300 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 61400 61400 180.555557 text
grestore
gsave
62300 61100 62100 61100 10 line
61600 61000 61500 61100 10 line
61500 61100 61600 61200 10 line
62100 61100 62000 61200 10 line
62000 61000 62100 61100 10 line
62000 61000 61600 61000 10 line
62000 61200 61600 61200 10 line
grestore
gsave
false true false true 202.222224 [(net=PWMa:1) ] 0 61400 61000 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 61400 61100 180.555557 text
grestore
gsave
62300 60800 62100 60800 10 line
61600 60700 61500 60800 10 line
61500 60800 61600 60900 10 line
62100 60800 62000 60900 10 line
62000 60700 62100 60800 10 line
62000 60700 61600 60700 10 line
62000 60900 61600 60900 10 line
grestore
gsave
false true false true 202.222224 [(net=PWMd:1) ] 0 61400 60700 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 61400 60800 180.555557 text
grestore
gsave
62000 57900 62300 57900 10 line
gsave
false false false false 202.222224 [(SigAlt-Vext) ] 0 62355 57895 180.555557 text
grestore
gsave
false true false false 202.222224 [(1) ] 0 62205 57945 180.555557 text
grestore
62000 57100 62300 57100 10 line
gsave
false false false false 202.222224 [(SigP) ] 0 62355 57095 180.555557 text
grestore
gsave
false true false false 202.222224 [(2) ] 0 62205 57145 180.555557 text
grestore
62200 54100 63500 54100 10 line
63500 54100 63500 58600 10 line
63500 58600 62200 58600 10 line
62200 58600 62200 54100 10 line
62000 54900 62300 54900 10 line
gsave
false false false false 202.222224 [(PWMa) ] 0 62355 54895 180.555557 text
grestore
gsave
false true false false 202.222224 [(5) ] 0 62205 54945 180.555557 text
grestore
62000 54600 62300 54600 10 line
gsave
false false false false 202.222224 [(PWMd) ] 0 62355 54595 180.555557 text
grestore
gsave
false true false false 202.222224 [(6) ] 0 62205 54645 180.555557 text
grestore
62000 56800 62300 56800 10 line
gsave
false false false false 202.222224 [(SigM) ] 0 62355 56795 180.555557 text
grestore
gsave
false true false false 202.222224 [(3) ] 0 62205 56845 180.555557 text
grestore
62000 56200 62300 56200 10 line
gsave
false false false false 202.222224 [(sGND) ] 0 62355 56195 180.555557 text
grestore
gsave
false true false false 202.222224 [(4) ] 0 62205 56245 180.555557 text
grestore
62300 56800 63000 56800 10 line
63000 56100 100 270 450 10 darc
63000 55900 100 270 450 10 darc
63000 55700 100 270 450 10 darc
63000 56200 63200 56200 10 line
63200 56200 63200 55600 10 line
63200 55600 63000 55600 10 line
63100 55600 63100 55500 10 line
62900 55500 63300 55500 10 line
63000 55400 63200 55400 10 line
63050 55300 63150 55300 10 line
63000 56300 63200 56300 10 line
63200 56300 63200 56600 10 line
63200 56600 63000 56600 10 line
63000 56600 63000 56300 10 line
63100 56200 63100 56400 10 line
63100 56500 63100 56700 10 line
63000 56800 63100 56800 10 line
63100 56800 63100 56700 10 line
62300 54600 63100 54600 10 line
63000 54700 63200 54700 10 line
63200 54700 63200 55000 10 line
63200 55000 63000 55000 10 line
63000 55000 63000 54700 10 line
63100 55100 63100 54900 10 line
63100 54800 63100 54600 10 line
63100 55100 63400 55100 10 line
63400 55100 63400 55600 10 line
63400 55600 63200 55600 10 line
62300 56200 62800 56200 10 line
62800 56200 62800 55600 10 line
62800 55600 63000 55600 10 line
grestore
gsave
false false false false 202.222224 [(ANALOG) ] 0 62300 58300 180.555557 text
grestore
gsave
false false false false 202.222224 [(X3) ] 0 63100 58100 180.555557 text
grestore
gsave
62000 56800 61800 56800 10 line
61300 56700 61200 56800 10 line
61200 56800 61300 56900 10 line
61800 56800 61700 56900 10 line
61700 56700 61800 56800 10 line
61700 56700 61300 56700 10 line
61700 56900 61300 56900 10 line
grestore
gsave
false true false true 202.222224 [(net=SigM:1) ] 0 61100 56700 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 61100 56800 180.555557 text
grestore
gsave
62000 57100 61800 57100 10 line
61300 57000 61200 57100 10 line
61200 57100 61300 57200 10 line
61800 57100 61700 57200 10 line
61700 57000 61800 57100 10 line
61700 57000 61300 57000 10 line
61700 57200 61300 57200 10 line
grestore
gsave
false true false true 202.222224 [(net=SigP:1) ] 0 61100 57000 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 61100 57100 180.555557 text
grestore
gsave
62000 57900 61800 57900 10 line
61300 57800 61200 57900 10 line
61200 57900 61300 58000 10 line
61800 57900 61700 58000 10 line
61700 57800 61800 57900 10 line
61700 57800 61300 57800 10 line
61700 58000 61300 58000 10 line
grestore
gsave
false true false true 202.222224 [(net=SigAlt:1) ] 0 61100 57800 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 61100 57900 180.555557 text
grestore
gsave
57500 60400 57800 60400 10 line
gsave
false false false false 202.222224 [(Vsys) ] 0 57855 60395 180.555557 text
grestore
gsave
false true false false 202.222224 [(1) ] 0 57705 60445 180.555557 text
grestore
57700 57500 59500 57500 10 line
59500 57500 59500 61500 10 line
59500 61500 57700 61500 10 line
57700 61500 57700 57500 10 line
58500 60300 58800 60300 10 line
58800 60300 58800 60500 10 line
58800 60500 58500 60500 10 line
58500 60500 58500 60300 10 line
58400 60400 58600 60400 10 line
58700 60400 58900 60400 10 line
57500 60100 57800 60100 10 line
gsave
false false false false 202.222224 [(pGND-sGND) ] 0 57855 60095 180.555557 text
grestore
gsave
false true false false 202.222224 [(2) ] 0 57705 60145 180.555557 text
grestore
57500 59600 57800 59600 10 line
gsave
false false false false 202.222224 [(Vext-Vmid-SigAlt) ] 0 57855 59595 180.555557 text
grestore
gsave
false true false false 202.222224 [(3) ] 0 57705 59645 180.555557 text
grestore
57500 59300 57800 59300 10 line
gsave
false false false false 202.222224 [(sGND) ] 0 57855 59295 180.555557 text
grestore
gsave
false true false false 202.222224 [(4) ] 0 57705 59345 180.555557 text
grestore
57500 58800 57800 58800 10 line
gsave
false false false false 202.222224 [(SigM) ] 0 57855 58795 180.555557 text
grestore
gsave
false true false false 202.222224 [(5) ] 0 57705 58845 180.555557 text
grestore
57500 58600 57800 58600 10 line
gsave
false false false false 202.222224 [(SigP) ] 0 57855 58595 180.555557 text
grestore
gsave
false true false false 202.222224 [(6) ] 0 57705 58645 180.555557 text
grestore
57500 58000 57800 58000 10 line
gsave
false false false false 202.222224 [(PWMd) ] 0 57855 57995 180.555557 text
grestore
gsave
false true false false 202.222224 [(8) ] 0 57705 58045 180.555557 text
grestore
57500 58200 57800 58200 10 line
gsave
false false false false 202.222224 [(PWMa) ] 0 57855 58195 180.555557 text
grestore
gsave
false true false false 202.222224 [(7) ] 0 57705 58245 180.555557 text
grestore
newpath
57500 59600
25
0 360 arc
fill
newpath
57500 59600
25
0 360 arc
fill
grestore
gsave
false false false false 202.222224 [(INJECTOR) ] 0 57800 61200 180.555557 text
grestore
gsave
false false false false 202.222224 [(X1) ] 0 58600 60900 180.555557 text
grestore
gsave
57500 60100 57300 60100 10 line
57300 59950 57300 60250 10 line
gsave
false false false false 161.777776 [(Vee) ] 90 57250 59975 144.444443 text
grestore
grestore
gsave
57200 60400 57200 60600 10 line
57050 60600 57350 60600 10 line
grestore
gsave
true false false false 202.222224 [(Vsys:1) ] 0 57200 60650 180.555557 text
grestore
57200 60400 57500 60400 10 line
gsave
57200 59800 57200 59400 10 line
57500 59600 57200 59600 10 line
gsave
false true false false 202.222224 [(Vext) ] 90 57200 59800 180.555557 text
grestore
newpath
57500 59600
25
0 360 arc
fill
newpath
57500 59600
25
0 360 arc
fill
grestore
57500 59500 57500 59900 10 line
gsave
57000 59900 56800 59900 10 line
56300 59800 56200 59900 10 line
56200 59900 56300 60000 10 line
56800 59900 56700 60000 10 line
56700 59800 56800 59900 10 line
56700 59800 56300 59800 10 line
56700 60000 56300 60000 10 line
grestore
gsave
false true false true 202.222224 [(net=SigAlt:1) ] 0 56100 59800 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 56100 59900 180.555557 text
grestore
57000 59900 57500 59900 10 line
gsave
57300 59300 57500 59300 10 line
57300 59400 57300 59200 10 line
57250 59345 57250 59255 10 line
57210 59320 57210 59280 10 line
grestore
gsave
57500 58600 57300 58600 10 line
56800 58500 56700 58600 10 line
56700 58600 56800 58700 10 line
57300 58600 57200 58700 10 line
57200 58500 57300 58600 10 line
57200 58500 56800 58500 10 line
57200 58700 56800 58700 10 line
grestore
gsave
false true false true 202.222224 [(net=SigP:1) ] 0 57600 58700 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 56600 58600 180.555557 text
grestore
gsave
57500 58800 57300 58800 10 line
56800 58700 56700 58800 10 line
56700 58800 56800 58900 10 line
57300 58800 57200 58900 10 line
57200 58700 57300 58800 10 line
57200 58700 56800 58700 10 line
57200 58900 56800 58900 10 line
grestore
gsave
false true false true 202.222224 [(net=SigM:1) ] 0 57600 58900 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 56600 58800 180.555557 text
grestore
gsave
57500 58200 57300 58200 10 line
56800 58100 56700 58200 10 line
56700 58200 56800 58300 10 line
57300 58200 57200 58300 10 line
57200 58100 57300 58200 10 line
57200 58100 56800 58100 10 line
57200 58300 56800 58300 10 line
grestore
gsave
false true false true 202.222224 [(net=PWMa:1) ] 0 57700 58300 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 56600 58200 180.555557 text
grestore
gsave
57500 58000 57300 58000 10 line
56800 57900 56700 58000 10 line
56700 58000 56800 58100 10 line
57300 58000 57200 58100 10 line
57200 57900 57300 58000 10 line
57200 57900 56800 57900 10 line
57200 58100 56800 58100 10 line
grestore
gsave
false true false true 202.222224 [(net=PWMd:1) ] 0 57700 58100 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 56600 58000 180.555557 text
grestore
62000 63300 62300 63300 10 line
gsave
61800 56200 62000 56200 10 line
61800 56300 61800 56100 10 line
61750 56245 61750 56155 10 line
61710 56220 61710 56180 10 line
grestore
gsave
62000 54900 61800 54900 10 line
61300 54800 61200 54900 10 line
61200 54900 61300 55000 10 line
61800 54900 61700 55000 10 line
61700 54800 61800 54900 10 line
61700 54800 61300 54800 10 line
61700 55000 61300 55000 10 line
grestore
gsave
false true false true 202.222224 [(net=PWMa:1) ] 0 61100 54800 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 61100 54900 180.555557 text
grestore
gsave
62000 54600 61800 54600 10 line
61300 54500 61200 54600 10 line
61200 54600 61300 54700 10 line
61800 54600 61700 54700 10 line
61700 54500 61800 54600 10 line
61700 54500 61300 54500 10 line
61700 54700 61300 54700 10 line
grestore
gsave
false true false true 202.222224 [(net=PWMd:1) ] 0 61100 54500 180.555557 text
grestore
gsave
false true true false 202.222224 [(IO) ] 0 61100 54600 180.555557 text
grestore
60 60 62270 59970 fbox
60 60 62270 60270 fbox
60 60 62270 59670 fbox
60 60 62270 59370 fbox
newpath
57500 59600
25
0 360 arc
fill
newpath
57500 59600
25
0 360 arc
fill
newpath
57500 59600
25
0 360 arc
fill
newpath
57500 59600
25
0 360 arc
fill
gsave
[ 0.00 1.00 -1.00 0.00 57500 59500 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
57500 59600
25
0 360 arc
fill
newpath
57500 59600
25
0 360 arc
fill
showpage
%%End
